basePath: /api/handler
definitions:
  dto.BatchDeleteReq:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.ChangeHostGroup:
    properties:
      group_id:
        type: integer
      id:
        type: integer
    required:
    - group_id
    - id
    type: object
  dto.CommandInfo:
    properties:
      command:
        type: string
      group_id:
        type: integer
      groupBelong:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CommandOperate:
    properties:
      command:
        type: string
      group_id:
        type: integer
      groupBelong:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - command
    - name
    type: object
  dto.DashboardCurrent:
    properties:
      cpuPercent:
        items:
          type: number
        type: array
      cpuTotal:
        type: integer
      cpuUsed:
        type: number
      cpuUsedPercent:
        type: number
      diskData:
        items:
          $ref: '#/definitions/dto.DiskInfo'
        type: array
      gpuData:
        items:
          $ref: '#/definitions/dto.GPUInfo'
        type: array
      ioCount:
        type: integer
      ioReadBytes:
        type: integer
      ioReadTime:
        type: integer
      ioWriteBytes:
        type: integer
      ioWriteTime:
        type: integer
      load1:
        type: number
      load5:
        type: number
      load15:
        type: number
      loadUsagePercent:
        type: number
      memoryAvailable:
        type: integer
      memoryTotal:
        type: integer
      memoryUsed:
        type: integer
      memoryUsedPercent:
        type: number
      netBytesRecv:
        type: integer
      netBytesSent:
        type: integer
      procs:
        type: integer
      shotTime:
        type: string
      swapMemoryAvailable:
        type: integer
      swapMemoryTotal:
        type: integer
      swapMemoryUsed:
        type: integer
      swapMemoryUsedPercent:
        type: number
      timeSinceUptime:
        type: string
      uptime:
        type: integer
    type: object
  dto.DiskInfo:
    properties:
      device:
        type: string
      free:
        type: integer
      inodesFree:
        type: integer
      inodesTotal:
        type: integer
      inodesUsed:
        type: integer
      inodesUsedPercent:
        type: number
      path:
        type: string
      total:
        type: integer
      type:
        type: string
      used:
        type: integer
      usedPercent:
        type: number
    type: object
  dto.GPUInfo:
    properties:
      fanSpeed:
        type: string
      gpuUtil:
        type: string
      index:
        type: integer
      maxPowerLimit:
        type: string
      memTotal:
        type: string
      memUsed:
        type: string
      memoryUsage:
        type: string
      performanceState:
        type: string
      powerDraw:
        type: string
      powerUsage:
        type: string
      productName:
        type: string
      temperature:
        type: string
    type: object
  dto.GroupCreate:
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        type: string
    required:
    - name
    - type
    type: object
  dto.GroupInfo:
    properties:
      id:
        type: integer
      isDefault:
        type: boolean
      name:
        type: string
      type:
        type: string
    type: object
  dto.GroupSearch:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  dto.GroupUpdate:
    properties:
      id:
        type: integer
      isDefault:
        type: boolean
      name:
        type: string
      type:
        type: string
    required:
    - type
    type: object
  dto.HostConnTest:
    properties:
      addr:
        type: string
      authMode:
        enum:
        - password
        - key
        type: string
      passPhrase:
        type: string
      password:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      privateKey:
        type: string
      user:
        type: string
    required:
    - addr
    - port
    - user
    type: object
  dto.HostOperate:
    properties:
      addr:
        type: string
      authMode:
        enum:
        - password
        - key
        type: string
      description:
        type: string
      group_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      passPhrase:
        type: string
      password:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      privateKey:
        type: string
      rememberPassword:
        type: boolean
      user:
        type: string
    required:
    - addr
    - port
    - user
    type: object
  dto.HostTree:
    properties:
      children:
        items:
          $ref: '#/definitions/dto.TreeChild'
        type: array
      id:
        type: integer
      label:
        type: string
    type: object
  dto.Login:
    properties:
      authMethod:
        type: string
      captcha:
        type: string
      captchaID:
        type: string
      ignore_capycha:
        type: boolean
      name:
        type: string
      password:
        type: string
    type: object
  dto.OperateByID:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  dto.OsInfo:
    properties:
      diskSize:
        type: integer
      kernelArch:
        type: string
      kernelVersion:
        type: string
      os:
        type: string
      platform:
        type: string
      platformFamily:
        type: string
    type: object
  dto.PageResult:
    properties:
      items: {}
      total:
        type: integer
    type: object
  dto.SSHHistory:
    properties:
      address:
        type: string
      area:
        type: string
      authMode:
        type: string
      date:
        type: string
      dateStr:
        type: string
      message:
        type: string
      port:
        type: string
      status:
        type: string
      user:
        type: string
    type: object
  dto.SSHLog:
    properties:
      failedCount:
        type: integer
      logs:
        items:
          $ref: '#/definitions/dto.SSHHistory'
        type: array
      successfulCount:
        type: integer
      totalCount:
        type: integer
    type: object
  dto.SearchForTree:
    properties:
      info:
        type: string
    type: object
  dto.SearchHostWithPage:
    properties:
      group_id:
        type: integer
      info:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
    required:
    - page
    - pageSize
    type: object
  dto.SearchLoginLogWithPage:
    properties:
      ip:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      status:
        type: string
    required:
    - page
    - pageSize
    type: object
  dto.SearchOpLogWithPage:
    properties:
      operation:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      source:
        type: string
      status:
        type: string
    required:
    - page
    - pageSize
    type: object
  dto.SearchSSHLog:
    properties:
      Status:
        enum:
        - Success
        - Failed
        - All
        type: string
      info:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
    required:
    - Status
    - page
    - pageSize
    type: object
  dto.TreeChild:
    properties:
      id:
        type: integer
      label:
        type: string
    type: object
  dto.UserLoginInfo:
    properties:
      mfaStatus:
        type: string
      name:
        type: string
      token:
        type: string
    type: object
  request.FileReadByLineReq:
    properties:
      ID:
        type: integer
      latest:
        type: boolean
      name:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      type:
        type: string
    required:
    - page
    - pageSize
    - type
    type: object
host: localhost:8848
info:
  contact:
    email: support@yourwebapp.com
    name: API Support
  description: This is the API documentation for LinuxOnM.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: LinuxOnM API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: 用户登录
      parameters:
      - description: 安全入口 base64 加密串
        in: header
        name: EntranceCode
        required: true
        type: string
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserLoginInfo'
      summary: User login
      tags:
      - Auth
  /dashboard/base/os:
    get:
      consumes:
      - application/json
      description: 获取服务器基础数据
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OsInfo'
      security:
      - ApiKeyAuth: []
      summary: Load os info
      tags:
      - Dashboard
  /dashboard/current/:ioOption/:netOption:
    get:
      consumes:
      - application/json
      description: 获取首页实时数据
      parameters:
      - description: request
        in: path
        name: ioOption
        required: true
        type: string
      - description: request
        in: path
        name: netOption
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DashboardCurrent'
      security:
      - ApiKeyAuth: []
      summary: Load dashboard current info
      tags:
      - Dashboard
  /file/read:
    post:
      description: 按行读取日志文件
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.FileReadByLineReq'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Read file by Line
      tags:
      - File
  /group:
    post:
      consumes:
      - application/json
      description: This function serves the purpose of creating a new system group.
        It first validates and binds the incoming JSON request data of type dto.GroupCreate.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupCreate'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create group
      tags:
      - System Group
      x-panel-log:
        BeforeFunctions: []
        bodyKeys:
        - name
        - type
        formatEN: create group [name][type]
        formatZH: 创建组 [name][type]
        paramKeys: []
  /group/search:
    post:
      consumes:
      - application/json
      description: This function is used to query and retrieve a list of system groups.
        It first validates and binds the incoming JSON request data of type dto.GroupSearch.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupSearch'
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GroupInfo'
            type: array
      security:
      - ApiKeyAuth: []
      summary: List groups
      tags:
      - System Group
  /groups/del:
    post:
      consumes:
      - application/json
      description: This function is specifically designed to handle the deletion of
        system groups. It commences by validating and binding the incoming JSON request
        data of type dto.OperateByID.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.OperateByID'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete group
      tags:
      - System Group
      x-panel-log:
        BeforeFunctions:
        - db: groups
          input_column: id
          input_value: id
          isList: false
          output_column: name
          output_value: name
        - db: groups
          input_column: id
          input_value: id
          isList: false
          output_column: type
          output_value: type
        bodyKeys:
        - id
        formatEN: delete group [type][name]
        formatZH: 删除组 [type][name]
        paramKeys: []
  /groups/update:
    post:
      consumes:
      - application/json
      description: This function is responsible for handling the update operation
        of system groups. It first validates and binds the incoming JSON request data
        of type dto.GroupUpdate.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupUpdate'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Update group
      tags:
      - System Group
      x-panel-log:
        BeforeFunctions: []
        bodyKeys:
        - name
        - type
        formatEN: update group [name][type]
        formatZH: 更新组 [name][type]
        paramKeys: []
  /host:
    post:
      consumes:
      - application/json
      description: This function is used to create or update a host. It first validates
        and binds the incoming JSON request data of type dto.HostOperate.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.HostOperate'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create host
      tags:
      - Host
      x-panel-log:
        BeforeFunctions: []
        bodyKeys:
        - name
        - addr
        formatEN: create host [name][addr]
        formatZH: 创建主机 [name][addr]
        paramKeys: []
  /host/command:
    get:
      description: This function is used to retrieve the list of quick commands. It
        calls the commandService.List function which is responsible for querying and
        fetching the relevant command data from the underlying data source, such as
        a database. If the query operation in the commandService.List function is
        successful, it returns the list of commands which is then sent back as a successful
        response with a status code of 200 and the data in the format of dto.CommandInfo.
        In case of any errors during the query process, such as database connection
        issues or errors in data retrieval, the helper.ErrorWithDetail function is
        called to send back an error response with a specific error code (constant.CodeErrInternalServer)
        and error type (constant.ErrTypeInternalServer), along with the detailed error
        message.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommandInfo'
      security:
      - ApiKeyAuth: []
      summary: List commands
      tags:
      - Command
    post:
      consumes:
      - application/json
      description: This function is designed to create a new quick command. It first
        validates and binds the incoming JSON request data of type dto.CommandOperate.
        The dto.CommandOperate structure likely contains essential fields for creating
        a command, such as the name and the actual command text. After successful
        validation and binding, it calls the commandService.Create function, passing
        the validated request data (req) as an argument. The commandService.Create
        function is tasked with performing the actual creation operations in the underlying
        data source, which may involve inserting the new command record with the provided
        details and handling any associated business logic or data integrity checks.
        If the creation process is successful, a success response with no additional
        data is returned. In case of any errors during the validation and binding
        of the request data or during the actual creation process in the commandService.Create
        function, the helper.ErrorWithDetail function is called to send back an error
        response with the appropriate error code and type, along with the detailed
        error message.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CommandOperate'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Create command
      tags:
      - Command
      x-panel-log:
        BeforeFunctions: []
        bodyKeys:
        - name
        - command
        formatEN: create quick command [name][command]
        formatZH: 创建快捷命令 [name][command]
        paramKeys: []
  /host/command/del:
    post:
      consumes:
      - application/json
      description: This function is specifically designed to handle the deletion of
        quick commands. It first initiates by validating and binding the incoming
        JSON request data of type dto.BatchDeleteReq.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDeleteReq'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete command
      tags:
      - Command
      x-panel-log:
        BeforeFunctions:
        - db: commands
          input_column: id
          input_value: ids
          isList: true
          output_column: name
          output_value: names
        bodyKeys:
        - ids
        formatEN: delete quick command [names]
        formatZH: 删除快捷命令 [names]
        paramKeys: []
  /host/command/update:
    post:
      consumes:
      - application/json
      description: This function is dedicated to handling the update operation for
        quick commands.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CommandOperate'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Update command
      tags:
      - Command
      x-panel-log:
        BeforeFunctions: []
        bodyKeys:
        - name
        formatEN: update quick command [name]
        formatZH: 更新快捷命令 [name]
        paramKeys: []
  /host/del:
    post:
      consumes:
      - application/json
      description: This function is designed to handle the deletion of hosts. It operates
        in a way that first validates and binds the incoming JSON request data of
        type dto.BatchDeleteReq.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDeleteReq'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete host
      tags:
      - Host
      x-panel-log:
        BeforeFunctions:
        - db: hosts
          input_column: id
          input_value: ids
          isList: true
          output_column: addr
          output_value: addrs
        bodyKeys:
        - ids
        formatEN: delete host [addrs]
        formatZH: 删除主机 [addrs]
        paramKeys: []
  /host/search:
    post:
      consumes:
      - application/json
      description: This function is used to retrieve a paginated list of hosts. It
        first validates and binds the incoming JSON request data of type dto.SearchHostWithPage.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchHostWithPage'
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.HostTree'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Page host
      tags:
      - Host
  /host/test/byid/:id:
    post:
      consumes:
      - application/json
      description: 测试主机连接
      parameters:
      - description: request
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Test host conn by host id
      tags:
      - Host
  /host/test/byinfo:
    post:
      consumes:
      - application/json
      description: This function is used to test the SSH connection to a host based
        on the connection information provided in the request body.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.HostConnTest'
      responses:
        "200":
          description: Returns true if the SSH connection to the host is successfully
            established, false otherwise.
      security:
      - ApiKeyAuth: []
      summary: Test host connection by provided connection information
      tags:
      - Host
  /host/tree:
    post:
      consumes:
      - application/json
      description: This function is used to load the host information in a tree-like
        structure. It first validates and binds the incoming JSON request data of
        type dto.SearchForTree.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchForTree'
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.HostTree'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Load host tree
      tags:
      - Host
  /host/update:
    post:
      consumes:
      - application/json
      description: This function is used to update host information. It first validates
        and binds the incoming JSON request data of type dto.HostOperate.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.HostOperate'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Update host
      tags:
      - Host
      x-panel-log:
        BeforeFunctions: []
        bodyKeys:
        - name
        - addr
        formatEN: update host [name][addr]
        formatZH: 更新主机信息 [name][addr]
        paramKeys: []
  /host/update/group:
    post:
      consumes:
      - application/json
      description: This function is designed to handle the operation of changing the
        group to which a host belongs, which is often referred to as "switching the
        host's group".
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeHostGroup'
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Update host group
      tags:
      - Host
      x-panel-log:
        BeforeFunctions:
        - db: hosts
          input_column: id
          input_value: id
          isList: false
          output_column: addr
          output_value: addr
        bodyKeys:
        - id
        - group
        formatEN: change host [addr] group => [group]
        formatZH: 切换主机[addr]分组 => [group]
        paramKeys: []
  /log/operation:
    post:
      consumes:
      - application/json
      description: 获取系统操作日志列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchOpLogWithPage'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Page operation logs
      tags:
      - Logs
  /log/ssh:
    post:
      consumes:
      - application/json
      description: 获取 SSH 登录日志
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchSSHLog'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SSHLog'
      security:
      - ApiKeyAuth: []
      summary: Load host SSH logs
      tags:
      - SSH
  /log/system/files:
    get:
      description: 获取系统日志文件列表
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Load system log files
      tags:
      - Logs
  /logs/login:
    post:
      consumes:
      - application/json
      description: 获取系统登录日志列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchLoginLogWithPage'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Page login logs
      tags:
      - Logs
swagger: "2.0"
