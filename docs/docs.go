// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@yourwebapp.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/is-safety": {
            "get": {
                "description": "获取系统安全登录状态",
                "tags": [
                    "Auth"
                ],
                "summary": "Load safety status",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "用户登录",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "安全入口 base64 加密串",
                        "name": "EntranceCode",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginInfo"
                        }
                    }
                }
            }
        },
        "/cronjob": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "创建计划任务",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Create cronjob",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CronjobCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "type",
                        "name"
                    ],
                    "formatEN": "create cronjob [type][name]",
                    "formatZH": "创建计划任务 [type][name]",
                    "paramKeys": []
                }
            }
        },
        "/cronjob/del": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "删除计划任务",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Delete cronjob",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CronjobBatchDelete"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "cronjobs",
                            "input_column": "id",
                            "input_value": "ids",
                            "isList": true,
                            "output_column": "name",
                            "output_value": "names"
                        }
                    ],
                    "bodyKeys": [
                        "ids"
                    ],
                    "formatEN": "delete cronjob [names]",
                    "formatZH": "删除计划任务 [names]",
                    "paramKeys": []
                }
            }
        },
        "/cronjob/handle": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "手动执行计划任务",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Handle cronjob once",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OperateByID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "cronjobs",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "name",
                            "output_value": "name"
                        }
                    ],
                    "bodyKeys": [
                        "id"
                    ],
                    "formatEN": "manually execute the cronjob [name]",
                    "formatZH": "手动执行计划任务 [name]",
                    "paramKeys": []
                }
            }
        },
        "/cronjob/record/clean": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "清空计划任务记录",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Clean job records",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CronjobClean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "cronjobs",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "name",
                            "output_value": "name"
                        }
                    ],
                    "bodyKeys": [
                        "id"
                    ],
                    "formatEN": "clean cronjob [name] records",
                    "formatZH": "清空计划任务记录 [name]",
                    "paramKeys": []
                }
            }
        },
        "/cronjob/record/log": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取计划任务记录日志",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Load Cronjob record log",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OperateByID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/cronjob/record/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取计划任务记录",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Page job records",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                }
            }
        },
        "/cronjob/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取计划任务分页",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Page cronjob",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PageCronjob"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                }
            }
        },
        "/cronjob/status": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新计划任务状态",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Update cronjob status",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CronjobUpdateStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "cronjobs",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "name",
                            "output_value": "name"
                        }
                    ],
                    "bodyKeys": [
                        "id",
                        "status"
                    ],
                    "formatEN": "change the status of cronjob [name] to [status].",
                    "formatZH": "修改计划任务 [name] 状态为 [status]",
                    "paramKeys": []
                }
            }
        },
        "/cronjob/update": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新计划任务",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cronjob"
                ],
                "summary": "Update cronjob",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CronjobUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "cronjobs",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "name",
                            "output_value": "name"
                        }
                    ],
                    "bodyKeys": [
                        "id"
                    ],
                    "formatEN": "update cronjob [name]",
                    "formatZH": "更新计划任务 [name]",
                    "paramKeys": []
                }
            }
        },
        "/dashboard/base/os": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取服务器基础数据",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Load os info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.OsInfo"
                        }
                    }
                }
            }
        },
        "/dashboard/current/:ioOption/:netOption": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取首页实时数据",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Load dashboard current info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "request",
                        "name": "ioOption",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "request",
                        "name": "netOption",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.DashboardCurrent"
                        }
                    }
                }
            }
        },
        "/file": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Create file",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "path"
                    ],
                    "formatEN": "Create dir or file [path]",
                    "formatZH": "创建文件/文件夹 [path]",
                    "paramKeys": []
                }
            }
        },
        "/file/batch/role": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Batch change file mode and owner",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileRoleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "paths",
                        "mode",
                        "user",
                        "group"
                    ],
                    "formatEN": "Batch change file mode and owner [paths] =\u003e [mode]/[user]/[group]",
                    "formatZH": "批量修改文件权限和用户/组 [paths] =\u003e [mode]/[user]/[group]",
                    "paramKeys": []
                }
            }
        },
        "/file/check": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Check file exist",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FilePathCheck"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/file/content": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Load file content",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileContentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FileInfo"
                        }
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "path"
                    ],
                    "formatEN": "Load file content [path]",
                    "formatZH": "获取文件内容 [path]",
                    "paramKeys": []
                }
            }
        },
        "/file/del": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Delete file",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileDelete"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "path"
                    ],
                    "formatEN": "Delete dir or file [path]",
                    "formatZH": "删除文件/文件夹 [path]",
                    "paramKeys": []
                }
            }
        },
        "/file/move": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Move file",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileMove"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "oldPaths",
                        "newPath"
                    ],
                    "formatEN": "Move [oldPaths] =\u003e [newPath]",
                    "formatZH": "移动文件 [oldPaths] =\u003e [newPath]",
                    "paramKeys": []
                }
            }
        },
        "/file/read": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "按行读取日志文件",
                "tags": [
                    "File"
                ],
                "summary": "Read file by Line",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileReadByLineReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/file/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "List files",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.FileOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FileInfo"
                        }
                    }
                }
            }
        },
        "/file/upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "File"
                ],
                "summary": "Upload file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "request",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "path"
                    ],
                    "formatEN": "Upload file [path]",
                    "formatZH": "上传文件 [path]",
                    "paramKeys": []
                }
            }
        },
        "/group": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function serves the purpose of creating a new system group. It first validates and binds the incoming JSON request data of type dto.GroupCreate.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Group"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroupCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "name",
                        "type"
                    ],
                    "formatEN": "create group [name][type]",
                    "formatZH": "创建组 [name][type]",
                    "paramKeys": []
                }
            }
        },
        "/group/del": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is specifically designed to handle the deletion of system groups. It commences by validating and binding the incoming JSON request data of type dto.OperateByID.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Group"
                ],
                "summary": "Delete group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OperateByID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "groups",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "name",
                            "output_value": "name"
                        },
                        {
                            "db": "groups",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "type",
                            "output_value": "type"
                        }
                    ],
                    "bodyKeys": [
                        "id"
                    ],
                    "formatEN": "delete group [type][name]",
                    "formatZH": "删除组 [type][name]",
                    "paramKeys": []
                }
            }
        },
        "/group/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to query and retrieve a list of system groups. It first validates and binds the incoming JSON request data of type dto.GroupSearch.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Group"
                ],
                "summary": "List groups",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroupSearch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GroupInfo"
                            }
                        }
                    }
                }
            }
        },
        "/group/update": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is responsible for handling the update operation of system groups. It first validates and binds the incoming JSON request data of type dto.GroupUpdate.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Group"
                ],
                "summary": "Update group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroupUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "name",
                        "type"
                    ],
                    "formatEN": "update group [name][type]",
                    "formatZH": "更新组 [name][type]",
                    "paramKeys": []
                }
            }
        },
        "/host": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to create or update a host. It first validates and binds the incoming JSON request data of type dto.HostOperate.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Create host",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.HostOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "name",
                        "addr"
                    ],
                    "formatEN": "create host [name][addr]",
                    "formatZH": "创建主机 [name][addr]",
                    "paramKeys": []
                }
            }
        },
        "/host/command": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to retrieve the list of quick commands. It calls the commandService.List function which is responsible for querying and fetching the relevant command data from the underlying data source, such as a database. If the query operation in the commandService.List function is successful, it returns the list of commands which is then sent back as a successful response with a status code of 200 and the data in the format of dto.CommandInfo. In case of any errors during the query process, such as database connection issues or errors in data retrieval, the helper.ErrorWithDetail function is called to send back an error response with a specific error code (constant.CodeErrInternalServer) and error type (constant.ErrTypeInternalServer), along with the detailed error message.",
                "tags": [
                    "Command"
                ],
                "summary": "List commands",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CommandInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is designed to create a new quick command. It first validates and binds the incoming JSON request data of type dto.CommandOperate. The dto.CommandOperate structure likely contains essential fields for creating a command, such as the name and the actual command text. After successful validation and binding, it calls the commandService.Create function, passing the validated request data (req) as an argument. The commandService.Create function is tasked with performing the actual creation operations in the underlying data source, which may involve inserting the new command record with the provided details and handling any associated business logic or data integrity checks. If the creation process is successful, a success response with no additional data is returned. In case of any errors during the validation and binding of the request data or during the actual creation process in the commandService.Create function, the helper.ErrorWithDetail function is called to send back an error response with the appropriate error code and type, along with the detailed error message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Command"
                ],
                "summary": "Create command",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CommandOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "name",
                        "command"
                    ],
                    "formatEN": "create quick command [name][command]",
                    "formatZH": "创建快捷命令 [name][command]",
                    "paramKeys": []
                }
            }
        },
        "/host/command/del": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is specifically designed to handle the deletion of quick commands. It first initiates by validating and binding the incoming JSON request data of type dto.BatchDeleteReq.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Command"
                ],
                "summary": "Delete command",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "commands",
                            "input_column": "id",
                            "input_value": "ids",
                            "isList": true,
                            "output_column": "name",
                            "output_value": "names"
                        }
                    ],
                    "bodyKeys": [
                        "ids"
                    ],
                    "formatEN": "delete quick command [names]",
                    "formatZH": "删除快捷命令 [names]",
                    "paramKeys": []
                }
            }
        },
        "/host/command/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to retrieve a paginated list of quick commands. It first validates and binds the incoming JSON request data of type dto.SearchCommandWithPage. The dto.SearchCommandWithPage structure likely contains parameters related to pagination, such as the page number, page size, and potentially search criteria to filter the commands. After successful validation and binding to the 'req' variable, it calls the commandService.SearchWithPage function, passing the 'req' object. The commandService.SearchWithPage function is responsible for querying the underlying data source (usually a database) to fetch the relevant commands based on the provided pagination and search parameters. It calculates the total number of commands that match the criteria and returns a subset of commands according to the page number and page size. If the query operation is successful, a success response with status code 200 is sent, containing the paginated data in the format of dto.PageResult, which includes the list of commands and the total count. In case of any errors during the query process, such as database connection issues, incorrect pagination parameters, or errors in data retrieval, the helper.ErrorWithDetail function is called to send back an error response with a specific error code (constant.CodeErrInternalServer) and error type (constant.ErrTypeInternalServer), along with the detailed error message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Command"
                ],
                "summary": "Page commands",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchCommandWithPage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                }
            }
        },
        "/host/command/tree": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is designed to obtain a tree-like structure representation of the quick commands. It calls the commandService.SearchForTree function which is responsible for querying and constructing the command tree from the underlying data source. The command tree might be organized in a hierarchical manner, perhaps based on command groups or other relevant categorizations. If the query and construction of the command tree in the commandService.SearchForTree function is successful, it returns the tree data which is then sent back as a successful response with a status code of 200 and the data in the format of dto.CommandTree. In case of any errors during the process, such as database connection problems or errors in data retrieval and tree construction, the helper.ErrorWithDetail function is called to send back an error response with a specific error code (constant.CodeErrInternalServer) and error type (constant.ErrTypeInternalServer), along with the detailed error message.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Command"
                ],
                "summary": "Tree commands",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "Array"
                        }
                    }
                }
            }
        },
        "/host/command/update": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is dedicated to handling the update operation for quick commands.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Command"
                ],
                "summary": "Update command",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CommandOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "name"
                    ],
                    "formatEN": "update quick command [name]",
                    "formatZH": "更新快捷命令 [name]",
                    "paramKeys": []
                }
            }
        },
        "/host/del": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is designed to handle the deletion of hosts. It operates in a way that first validates and binds the incoming JSON request data of type dto.BatchDeleteReq.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Delete host",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "hosts",
                            "input_column": "id",
                            "input_value": "ids",
                            "isList": true,
                            "output_column": "addr",
                            "output_value": "addrs"
                        }
                    ],
                    "bodyKeys": [
                        "ids"
                    ],
                    "formatEN": "delete host [addrs]",
                    "formatZH": "删除主机 [addrs]",
                    "paramKeys": []
                }
            }
        },
        "/host/firewall/base": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取防火墙基础信息",
                "tags": [
                    "Firewall"
                ],
                "summary": "Load firewall base info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.FirewallBaseInfo"
                        }
                    }
                }
            }
        },
        "/host/firewall/batch": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "批量删除防火墙规则",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BatchRuleOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/firewall/forward": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新防火墙端口转发规则",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ForwardRuleOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "source_port"
                    ],
                    "formatEN": "update port forward rules [source_port]",
                    "formatZH": "更新端口转发规则 [source_port]",
                    "paramKeys": []
                }
            }
        },
        "/host/firewall/ip": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "创建防火墙 IP 规则",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddrRuleOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "strategy",
                        "address"
                    ],
                    "formatEN": "create address rules [strategy][address]",
                    "formatZH": "添加 ip 规则 [strategy] [address]",
                    "paramKeys": []
                }
            }
        },
        "/host/firewall/operate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "修改防火墙状态",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Page firewall status",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.FirewallOperation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "operation"
                    ],
                    "formatEN": "[operation] firewall",
                    "formatZH": "[operation] 防火墙",
                    "paramKeys": []
                }
            }
        },
        "/host/firewall/port": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "创建防火墙端口规则",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PortRuleOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "port",
                        "strategy"
                    ],
                    "formatEN": "create port rules [strategy][port]",
                    "formatZH": "添加端口规则 [strategy] [port]",
                    "paramKeys": []
                }
            }
        },
        "/host/firewall/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取防火墙规则列表分页",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Page firewall rules",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RuleSearch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                }
            }
        },
        "/host/firewall/update/addr": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新 ip 防火墙规则",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddrRuleUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/firewall/update/description": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新防火墙描述",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Update rule description",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateFirewallDescription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/firewall/update/port": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新端口防火墙规则",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Firewall"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PortRuleUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/monitor/clean": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete all the existing monitor data.",
                "tags": [
                    "Monitor"
                ],
                "summary": "Clean monitor datas",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [],
                    "formatEN": "clean monitor datas",
                    "formatZH": "清空监控数据",
                    "paramKeys": []
                }
            }
        },
        "/host/monitor/io_options": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve available I/O options which include \"all\" and the names of disk devices obtained from disk I/O counters.",
                "tags": [
                    "Monitor"
                ],
                "summary": "Get I/O options.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/monitor/net_options": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve available network options which include \"all\" and the names of network interfaces obtained from network statistics.",
                "tags": [
                    "Monitor"
                ],
                "summary": "Get network options.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/monitor/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is responsible for retrieving monitor data based on the provided request parameters.",
                "tags": [
                    "Monitor"
                ],
                "summary": "Load monitor data",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MonitorSearch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/host/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to retrieve a paginated list of hosts. It first validates and binds the incoming JSON request data of type dto.SearchHostWithPage.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Page host",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchHostWithPage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.HostTree"
                            }
                        }
                    }
                }
            }
        },
        "/host/test/byid/:id": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "测试主机连接",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Test host conn by host id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "request",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/host/test/byinfo": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to test the SSH connection to a host based on the connection information provided in the request body.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Test host connection by provided connection information",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.HostConnTest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns true if the SSH connection to the host is successfully established, false otherwise."
                    }
                }
            }
        },
        "/host/tree": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to load the host information in a tree-like structure. It first validates and binds the incoming JSON request data of type dto.SearchForTree.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Load host tree",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchForTree"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.HostTree"
                            }
                        }
                    }
                }
            }
        },
        "/host/update": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is used to update host information. It first validates and binds the incoming JSON request data of type dto.HostOperate.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Update host",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.HostOperate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "name",
                        "addr"
                    ],
                    "formatEN": "update host [name][addr]",
                    "formatZH": "更新主机信息 [name][addr]",
                    "paramKeys": []
                }
            }
        },
        "/host/update/group": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This function is designed to handle the operation of changing the group to which a host belongs, which is often referred to as \"switching the host's group\".",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Host"
                ],
                "summary": "Update host group",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeHostGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [
                        {
                            "db": "hosts",
                            "input_column": "id",
                            "input_value": "id",
                            "isList": false,
                            "output_column": "addr",
                            "output_value": "addr"
                        }
                    ],
                    "bodyKeys": [
                        "id",
                        "group"
                    ],
                    "formatEN": "change host [addr] group =\u003e [group]",
                    "formatZH": "切换主机[addr]分组 =\u003e [group]",
                    "paramKeys": []
                }
            }
        },
        "/log/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取系统登录日志列表分页",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Page login logs",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchLoginLogWithPage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                }
            }
        },
        "/log/operation": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取系统操作日志列表分页",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Page operation logs",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchOpLogWithPage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PageResult"
                        }
                    }
                }
            }
        },
        "/log/ssh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取 SSH 登录日志",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "SSH"
                ],
                "summary": "Load host SSH logs",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchSSHLog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SSHLog"
                        }
                    }
                }
            }
        },
        "/log/system/files": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取系统日志文件列表",
                "tags": [
                    "Logs"
                ],
                "summary": "Load system log files",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/process/stop": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Process"
                ],
                "summary": "Stop Process",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ProcessReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "PID"
                    ],
                    "formatEN": "结束进程 [PID]",
                    "formatZH": "结束进程 [PID]",
                    "paramKeys": []
                }
            }
        },
        "/setting/expired/handle": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "重置过期系统登录密码",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Reset system password expired",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PasswordUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [],
                    "formatEN": "reset an expired Password",
                    "formatZH": "重置过期密码",
                    "paramKeys": []
                }
            }
        },
        "/setting/interface": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取系统IPv4和IPv6地址信息",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Load system address",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/setting/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the system setting information.",
                "tags": [
                    "System Setting"
                ],
                "summary": "Load system setting information.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SettingInfo"
                        }
                    }
                }
            }
        },
        "/setting/search/available": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取系统可用状态",
                "tags": [
                    "System Setting"
                ],
                "summary": "Load system available status",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/setting/ssl/download": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "下载 SSL 证书",
                "tags": [
                    "System Setting"
                ],
                "summary": "Download system cert",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/setting/ssl/info": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "获取 SSL 证书信息",
                "tags": [
                    "System Setting"
                ],
                "summary": "Load system cert info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SettingInfo"
                        }
                    }
                }
            }
        },
        "/setting/ssl/update": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "修改系统 SSL 状态",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Update system ssl",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SSLUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "ssl"
                    ],
                    "formatEN": "update system ssl =\u003e [ssl]",
                    "formatZH": "修改系统 ssl =\u003e [ssl]",
                    "paramKeys": []
                }
            }
        },
        "/setting/update": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Modify the system settings.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Update system settings.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SettingUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "key",
                        "value"
                    ],
                    "formatEN": "update system setting [key] =\u003e [value]",
                    "formatZH": "修改系统配置 [key] =\u003e [value]",
                    "paramKeys": []
                }
            }
        },
        "/setting/update/bind": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新系统监听信息",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Update system bind info",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BindInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "ipv6",
                        "bindAddress"
                    ],
                    "formatEN": "update system bind info =\u003e ipv6: [ipv6], 监听 IP: [bindAddress]",
                    "formatZH": "修改系统监听信息 =\u003e ipv6: [ipv6], 监听 IP: [bindAddress]",
                    "paramKeys": []
                }
            }
        },
        "/setting/update/password": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新系统登录密码",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Update system password",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PasswordUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [],
                    "formatEN": "update system password",
                    "formatZH": "修改系统密码",
                    "paramKeys": []
                }
            }
        },
        "/setting/update/port": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "更新系统端口",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Update system port",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PortUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "serverPort"
                    ],
                    "formatEN": "update system port =\u003e [serverPort]",
                    "formatZH": "修改系统端口 =\u003e [serverPort]",
                    "paramKeys": []
                }
            }
        },
        "/setting/update/proxy": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "服务器代理配置",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "System Setting"
                ],
                "summary": "Update proxy setting",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProxyUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-panel-log": {
                    "BeforeFunctions": [],
                    "bodyKeys": [
                        "proxyUrl",
                        "proxyPort"
                    ],
                    "formatEN": "set proxy [proxyPort]:[proxyPort].",
                    "formatZH": "服务器代理配置 [proxyPort]:[proxyPort]",
                    "paramKeys": []
                }
            }
        }
    },
    "definitions": {
        "dto.AddrRuleOperate": {
            "type": "object",
            "required": [
                "address",
                "operation",
                "strategy"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove"
                    ]
                },
                "strategy": {
                    "type": "string",
                    "enum": [
                        "accept",
                        "drop"
                    ]
                }
            }
        },
        "dto.AddrRuleUpdate": {
            "type": "object",
            "properties": {
                "newRule": {
                    "$ref": "#/definitions/dto.AddrRuleOperate"
                },
                "oldRule": {
                    "$ref": "#/definitions/dto.AddrRuleOperate"
                }
            }
        },
        "dto.BatchDeleteReq": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.BatchRuleOperate": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PortRuleOperate"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.BindInfo": {
            "type": "object",
            "required": [
                "bindAddress",
                "ipv6"
            ],
            "properties": {
                "bindAddress": {
                    "type": "string"
                },
                "ipv6": {
                    "type": "string",
                    "enum": [
                        "enable",
                        "disable"
                    ]
                }
            }
        },
        "dto.ChangeHostGroup": {
            "type": "object",
            "required": [
                "group_id",
                "id"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.CommandInfo": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "groupBelong": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CommandOperate": {
            "type": "object",
            "required": [
                "command",
                "name"
            ],
            "properties": {
                "command": {
                    "type": "string"
                },
                "groupBelong": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CronjobBatchDelete": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "cleanData": {
                    "type": "boolean"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.CronjobClean": {
            "type": "object",
            "required": [
                "cronjobID"
            ],
            "properties": {
                "cleanData": {
                    "type": "boolean"
                },
                "cronjobID": {
                    "type": "integer"
                },
                "isDelete": {
                    "type": "boolean"
                }
            }
        },
        "dto.CronjobCreate": {
            "type": "object",
            "required": [
                "name",
                "spec",
                "type"
            ],
            "properties": {
                "backupAccounts": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "containerName": {
                    "type": "string"
                },
                "defaultDownload": {
                    "type": "string"
                },
                "exclusionRules": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "retainCopies": {
                    "type": "integer",
                    "minimum": 1
                },
                "script": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "sourceDir": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.CronjobUpdate": {
            "type": "object",
            "required": [
                "id",
                "name",
                "spec"
            ],
            "properties": {
                "backupAccounts": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "containerName": {
                    "type": "string"
                },
                "defaultDownload": {
                    "type": "string"
                },
                "exclusionRules": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "retainCopies": {
                    "type": "integer",
                    "minimum": 1
                },
                "script": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "sourceDir": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "dto.CronjobUpdateStatus": {
            "type": "object",
            "required": [
                "id",
                "status"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.DashboardCurrent": {
            "type": "object",
            "properties": {
                "cpuPercent": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "cpuTotal": {
                    "type": "integer"
                },
                "cpuUsed": {
                    "type": "number"
                },
                "cpuUsedPercent": {
                    "type": "number"
                },
                "diskData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DiskInfo"
                    }
                },
                "gpuData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GPUInfo"
                    }
                },
                "ioCount": {
                    "type": "integer"
                },
                "ioReadBytes": {
                    "type": "integer"
                },
                "ioReadTime": {
                    "type": "integer"
                },
                "ioWriteBytes": {
                    "type": "integer"
                },
                "ioWriteTime": {
                    "type": "integer"
                },
                "load1": {
                    "type": "number"
                },
                "load15": {
                    "type": "number"
                },
                "load5": {
                    "type": "number"
                },
                "loadUsagePercent": {
                    "type": "number"
                },
                "memoryAvailable": {
                    "type": "integer"
                },
                "memoryTotal": {
                    "type": "integer"
                },
                "memoryUsed": {
                    "type": "integer"
                },
                "memoryUsedPercent": {
                    "type": "number"
                },
                "netBytesRecv": {
                    "type": "integer"
                },
                "netBytesSent": {
                    "type": "integer"
                },
                "procs": {
                    "type": "integer"
                },
                "shotTime": {
                    "type": "string"
                },
                "swapMemoryAvailable": {
                    "type": "integer"
                },
                "swapMemoryTotal": {
                    "type": "integer"
                },
                "swapMemoryUsed": {
                    "type": "integer"
                },
                "swapMemoryUsedPercent": {
                    "type": "number"
                },
                "timeSinceUptime": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                }
            }
        },
        "dto.DiskInfo": {
            "type": "object",
            "properties": {
                "device": {
                    "type": "string"
                },
                "free": {
                    "type": "integer"
                },
                "inodesFree": {
                    "type": "integer"
                },
                "inodesTotal": {
                    "type": "integer"
                },
                "inodesUsed": {
                    "type": "integer"
                },
                "inodesUsedPercent": {
                    "type": "number"
                },
                "path": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "used": {
                    "type": "integer"
                },
                "usedPercent": {
                    "type": "number"
                }
            }
        },
        "dto.FirewallBaseInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "pingStatus": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.FirewallOperation": {
            "type": "object",
            "required": [
                "operation"
            ],
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": [
                        "start",
                        "stop",
                        "restart",
                        "disablePing",
                        "enablePing"
                    ]
                }
            }
        },
        "dto.ForwardRuleOperate": {
            "type": "object",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "operation",
                            "port",
                            "protocol",
                            "targetPort"
                        ],
                        "properties": {
                            "num": {
                                "type": "string"
                            },
                            "operation": {
                                "type": "string",
                                "enum": [
                                    "add",
                                    "remove"
                                ]
                            },
                            "port": {
                                "type": "string"
                            },
                            "protocol": {
                                "type": "string",
                                "enum": [
                                    "tcp",
                                    "udp",
                                    "tcp/udp"
                                ]
                            },
                            "targetIP": {
                                "type": "string"
                            },
                            "targetPort": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "dto.GPUInfo": {
            "type": "object",
            "properties": {
                "fanSpeed": {
                    "type": "string"
                },
                "gpuUtil": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "maxPowerLimit": {
                    "type": "string"
                },
                "memTotal": {
                    "type": "string"
                },
                "memUsed": {
                    "type": "string"
                },
                "memoryUsage": {
                    "type": "string"
                },
                "performanceState": {
                    "type": "string"
                },
                "powerDraw": {
                    "type": "string"
                },
                "powerUsage": {
                    "type": "string"
                },
                "productName": {
                    "type": "string"
                },
                "temperature": {
                    "type": "string"
                }
            }
        },
        "dto.GroupCreate": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.GroupInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.GroupSearch": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.GroupUpdate": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.HostConnTest": {
            "type": "object",
            "required": [
                "addr",
                "port",
                "user"
            ],
            "properties": {
                "addr": {
                    "type": "string"
                },
                "authMode": {
                    "type": "string",
                    "enum": [
                        "password",
                        "key"
                    ]
                },
                "passPhrase": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "privateKey": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "dto.HostOperate": {
            "type": "object",
            "required": [
                "addr",
                "port",
                "user"
            ],
            "properties": {
                "addr": {
                    "type": "string"
                },
                "authMode": {
                    "type": "string",
                    "enum": [
                        "password",
                        "key"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passPhrase": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "privateKey": {
                    "type": "string"
                },
                "rememberPassword": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "dto.HostTree": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TreeChild"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "dto.Login": {
            "type": "object",
            "properties": {
                "authMethod": {
                    "type": "string"
                },
                "captcha": {
                    "type": "string"
                },
                "captchaID": {
                    "type": "string"
                },
                "ignoreCaptcha": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.MonitorSearch": {
            "type": "object",
            "required": [
                "param"
            ],
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                },
                "param": {
                    "type": "string",
                    "enum": [
                        "all",
                        "cpu",
                        "memory",
                        "load",
                        "io",
                        "network"
                    ]
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "dto.OperateByID": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.OsInfo": {
            "type": "object",
            "properties": {
                "diskSize": {
                    "type": "integer"
                },
                "kernelArch": {
                    "type": "string"
                },
                "kernelVersion": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "platformFamily": {
                    "type": "string"
                }
            }
        },
        "dto.PageCronjob": {
            "type": "object",
            "required": [
                "order",
                "orderBy",
                "page",
                "pageSize"
            ],
            "properties": {
                "info": {
                    "type": "string"
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "null",
                        "ascending",
                        "descending"
                    ]
                },
                "orderBy": {
                    "type": "string",
                    "enum": [
                        "name",
                        "status",
                        "created_at"
                    ]
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                }
            }
        },
        "dto.PageResult": {
            "type": "object",
            "properties": {
                "items": {},
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.PasswordUpdate": {
            "type": "object",
            "required": [
                "newPassword",
                "oldPassword"
            ],
            "properties": {
                "newPassword": {
                    "type": "string"
                },
                "oldPassword": {
                    "type": "string"
                }
            }
        },
        "dto.PortRuleOperate": {
            "type": "object",
            "required": [
                "operation",
                "port",
                "protocol",
                "strategy"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove"
                    ]
                },
                "port": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "enum": [
                        "tcp",
                        "udp",
                        "tcp/udp"
                    ]
                },
                "strategy": {
                    "type": "string",
                    "enum": [
                        "accept",
                        "drop"
                    ]
                }
            }
        },
        "dto.PortRuleUpdate": {
            "type": "object",
            "properties": {
                "newRule": {
                    "$ref": "#/definitions/dto.PortRuleOperate"
                },
                "oldRule": {
                    "$ref": "#/definitions/dto.PortRuleOperate"
                }
            }
        },
        "dto.PortUpdate": {
            "type": "object",
            "required": [
                "serverPort"
            ],
            "properties": {
                "serverPort": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                }
            }
        },
        "dto.ProxyUpdate": {
            "type": "object",
            "properties": {
                "proxyPasswd": {
                    "type": "string"
                },
                "proxyPasswdKeep": {
                    "type": "string"
                },
                "proxyPort": {
                    "type": "string"
                },
                "proxyType": {
                    "type": "string"
                },
                "proxyUrl": {
                    "type": "string"
                },
                "proxyUser": {
                    "type": "string"
                }
            }
        },
        "dto.RuleSearch": {
            "type": "object",
            "required": [
                "page",
                "pageSize",
                "type"
            ],
            "properties": {
                "info": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "strategy": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.SSHHistory": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "area": {
                    "type": "string"
                },
                "authMode": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "dateStr": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "dto.SSHLog": {
            "type": "object",
            "properties": {
                "failedCount": {
                    "type": "integer"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SSHHistory"
                    }
                },
                "successfulCount": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "dto.SSLUpdate": {
            "type": "object",
            "required": [
                "ssl",
                "sslType"
            ],
            "properties": {
                "cert": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "ssl": {
                    "type": "string",
                    "enum": [
                        "enable",
                        "disable"
                    ]
                },
                "sslID": {
                    "type": "integer"
                },
                "sslType": {
                    "type": "string",
                    "enum": [
                        "self",
                        "select",
                        "import",
                        "import-paste",
                        "import-local"
                    ]
                }
            }
        },
        "dto.SearchCommandWithPage": {
            "type": "object",
            "required": [
                "order",
                "orderBy",
                "page",
                "pageSize"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "string",
                    "enum": [
                        "null",
                        "ascending",
                        "descending"
                    ]
                },
                "orderBy": {
                    "type": "string",
                    "enum": [
                        "name",
                        "command",
                        "created_at"
                    ]
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                }
            }
        },
        "dto.SearchForTree": {
            "type": "object",
            "properties": {
                "info": {
                    "type": "string"
                }
            }
        },
        "dto.SearchHostWithPage": {
            "type": "object",
            "required": [
                "page",
                "pageSize"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                }
            }
        },
        "dto.SearchLoginLogWithPage": {
            "type": "object",
            "required": [
                "page",
                "pageSize"
            ],
            "properties": {
                "ip": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.SearchOpLogWithPage": {
            "type": "object",
            "required": [
                "page",
                "pageSize"
            ],
            "properties": {
                "operation": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.SearchRecord": {
            "type": "object",
            "required": [
                "page",
                "pageSize"
            ],
            "properties": {
                "cronjobID": {
                    "type": "integer"
                },
                "endTime": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.SearchSSHLog": {
            "type": "object",
            "required": [
                "Status",
                "page",
                "pageSize"
            ],
            "properties": {
                "Status": {
                    "type": "string",
                    "enum": [
                        "Success",
                        "Failed",
                        "All"
                    ]
                },
                "info": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                }
            }
        },
        "dto.SettingInfo": {
            "type": "object",
            "properties": {
                "allowIPs": {
                    "type": "string"
                },
                "bindAddress": {
                    "type": "string"
                },
                "bindDomain": {
                    "type": "string"
                },
                "complexityVerification": {
                    "type": "string"
                },
                "defaultNetwork": {
                    "type": "string"
                },
                "developerMode": {
                    "type": "string"
                },
                "dockerSockPath": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "emailVars": {
                    "type": "string"
                },
                "expirationDays": {
                    "type": "string"
                },
                "expirationTime": {
                    "type": "string"
                },
                "fileRecycleBin": {
                    "type": "string"
                },
                "ipv6": {
                    "type": "string"
                },
                "lastCleanData": {
                    "type": "string"
                },
                "lastCleanSize": {
                    "type": "string"
                },
                "lastCleanTime": {
                    "type": "string"
                },
                "localTime": {
                    "type": "string"
                },
                "menuTabs": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string"
                },
                "monitorInterval": {
                    "type": "string"
                },
                "monitorStatus": {
                    "type": "string"
                },
                "monitorStoreDays": {
                    "type": "string"
                },
                "noAuthSetting": {
                    "type": "string"
                },
                "ntpSite": {
                    "type": "string"
                },
                "panelName": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "proxyPasswd": {
                    "type": "string"
                },
                "proxyPasswdKeep": {
                    "type": "string"
                },
                "proxyPort": {
                    "type": "string"
                },
                "proxyType": {
                    "type": "string"
                },
                "proxyUrl": {
                    "type": "string"
                },
                "proxyUser": {
                    "type": "string"
                },
                "securityEntrance": {
                    "type": "string"
                },
                "serverPort": {
                    "type": "string"
                },
                "sessionTimeout": {
                    "type": "string"
                },
                "snapshotIgnore": {
                    "type": "string"
                },
                "ssl": {
                    "type": "string"
                },
                "sslType": {
                    "type": "string"
                },
                "systemIP": {
                    "type": "string"
                },
                "systemVersion": {
                    "type": "string"
                },
                "theme": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "dto.SettingUpdate": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "dto.TreeChild": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateFirewallDescription": {
            "type": "object",
            "required": [
                "strategy"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "strategy": {
                    "type": "string",
                    "enum": [
                        "accept",
                        "drop"
                    ]
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.UserLoginInfo": {
            "type": "object",
            "properties": {
                "mfaStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "files.FileInfo": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "favoriteID": {
                    "type": "integer"
                },
                "gid": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "isDetail": {
                    "type": "boolean"
                },
                "isDir": {
                    "type": "boolean"
                },
                "isHidden": {
                    "type": "boolean"
                },
                "isSymlink": {
                    "type": "boolean"
                },
                "itemTotal": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/files.FileInfo"
                    }
                },
                "linkPath": {
                    "type": "string"
                },
                "mimeType": {
                    "type": "string"
                },
                "modTime": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "updateTime": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "request.FileContentReq": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "isDetail": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "request.FileCreate": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "isDir": {
                    "type": "boolean"
                },
                "isLink": {
                    "type": "boolean"
                },
                "isSymlink": {
                    "type": "boolean"
                },
                "linkPath": {
                    "type": "string"
                },
                "mode": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "sub": {
                    "type": "boolean"
                }
            }
        },
        "request.FileDelete": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "forceDelete": {
                    "type": "boolean"
                },
                "isDir": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "request.FileMove": {
            "type": "object",
            "required": [
                "newPath",
                "oldPaths",
                "type"
            ],
            "properties": {
                "cover": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "newPath": {
                    "type": "string"
                },
                "oldPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "request.FileOption": {
            "type": "object",
            "properties": {
                "containSub": {
                    "type": "boolean"
                },
                "dir": {
                    "type": "boolean"
                },
                "expand": {
                    "type": "boolean"
                },
                "isDetail": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "search": {
                    "type": "string"
                },
                "showHidden": {
                    "type": "boolean"
                },
                "sortBy": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "string"
                }
            }
        },
        "request.FilePathCheck": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string"
                }
            }
        },
        "request.FileReadByLineReq": {
            "type": "object",
            "required": [
                "page",
                "pageSize",
                "type"
            ],
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "latest": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "request.FileRoleReq": {
            "type": "object",
            "required": [
                "group",
                "mode",
                "paths",
                "user"
            ],
            "properties": {
                "group": {
                    "type": "string"
                },
                "mode": {
                    "type": "integer"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sub": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "request.ProcessReq": {
            "type": "object",
            "required": [
                "PID"
            ],
            "properties": {
                "PID": {
                    "type": "integer"
                }
            }
        },
        "response.FileInfo": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "favoriteID": {
                    "type": "integer"
                },
                "gid": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "isDetail": {
                    "type": "boolean"
                },
                "isDir": {
                    "type": "boolean"
                },
                "isHidden": {
                    "type": "boolean"
                },
                "isSymlink": {
                    "type": "boolean"
                },
                "itemTotal": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/files.FileInfo"
                    }
                },
                "linkPath": {
                    "type": "string"
                },
                "mimeType": {
                    "type": "string"
                },
                "modTime": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "updateTime": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8848",
	BasePath:         "/api/handler",
	Schemes:          []string{},
	Title:            "LinuxOnM API",
	Description:      "This is the API documentation for LinuxOnM.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
